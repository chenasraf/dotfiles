# debug: true
# check_updates: true
defaults:
  type:
    brew:
      platforms:
        only: ['macos']
    # shell:
    #   env_shell:
    #     linux: zsh
    #     macos: zsh
env:
  DOTFILES: ~/.dotfiles
  LAZYGIT_HOME_OSX: ~/Library/ApplicationSupport/lazygit
  LAZYGIT_HOME_LINUX: ~/.config/lazygit

install:
  - name: device_uid
    type: shell
    check_installed: test -f $DOTFILES/.device_uid
    check_has_update: exit 1
    opts:
      command: |
        source $DOTFILES/plugins/common/colors.zsh
        echo
        echo_yellow "Unique device UID not set up. Enter device uid: "
        read duid
        echo

        if [[ -z $duid ]]; then
          echo_red "Device UID cannot be empty. Exiting"
          exit 1
        fi

        echo $duid >$DOTFILES/.device_uid
        echo_cyan "Device UID set to \"$duid\""
  - name: git-gpg
    type: shell
    check_installed: 'gpg --list-keys | grep -q "$GITHUB_GPG_KEY_ID"'
    opts:
      command: curl https://github.com/web-flow.gpg | gpg --import
  - name: git-config
    type: shell
    check_installed: git config --global user.name && git config --global user.email && git config --global user.signingkey
    opts:
      command: |
        git config --global user.signingkey "~/.ssh/id_casraf.pub"
        git config --global filter.lfs.clean "git-lfs clean -- %f"
        git config --global filter.lfs.smudge "git-lfs smudge -- %f"
        git config --global filter.lfs.process "git-lfs filter-process"
        git config --global filter.lfs.required true
        git config --global init.defaultBranch "master"
        git config --global credential.helper "store"
        git config --global pull.rebase true
        git config --global core.excludesfile "~/.config/.gitignore"
        # git config --global core.untrackedCache true
        # git config --global core.fsmonitor true
        git config --global rerere.enabled true
        git config --global gpg.format "ssh"
        git config --global gpg.ssh.allowedSignersFile "~/.ssh/allowed_signers"
        git config --global commit.gpgsign true
        git config --global maintenance.repo "~/.dotfiles"
        git config --global fetch.writeCommitGraph true
        git config --global log.showSignature true
        git config --global core.excludesfile ~/.config/.gitignore

        # ================================================================================================
        # Aliases/Custom commands
        # ================================================================================================

        # Change status
        git config --global alias.unchanged "update-index --assume-unchanged"
        git config --global alias.changed "update-index --no-assume-unchanged"
        git config --global alias.show-unchanged "!git ls-files -v | sed -e 's/^[a-z] //p; d'"
        git config --global alias.list-aliases "!git config --global --list | grep --color alias\. | grep -v list-aliases | sed \"s/alias\./\$(tput setaf 1)/\" | sed \"s/=/\$(tput sgr0)=/\""

        # Delta Pager
        git config --global core.pager delta
        git config --global interactive.diffFilter "delta --color-only"
        # git config --global delta.side-by-side true
        # git config --global delta.navigate true
        # git config --global delta.dark true
        git config --global merge.conflictStyle diff3
        git config --global delta.line-numbers true
        git config --global diff.colorMoved default

  - name: osx-defaults
    type: shell
    platforms:
      only: ['macos']
    opts:
      command: |
        defaults write -g PMPrintingExpandedStateForPrint -bool TRUE
        defaults write -g NSScrollViewRubberbanding -bool FALSE

  - name: nvim
    type: rsync
    opts:
      source: $DOTFILES/.config/nvim/
      destination: ~/.config/nvim/
      flags: --delete --exclude .git --exclude .DS_Store
  - name: config
    type: rsync
    opts:
      source: $DOTFILES/.config/
      destination: ~/.config/
      flags: --exclude lazygit.yml --exclude nvim --exclude .git --exclude .DS_Store
  - name: sofmani
    type: brew
    opts:
      tap: chenasraf/tap
  - name: treelike
    type: brew
    opts:
      tap: chenasraf/tap
  - name: lazygit
    type: group
    steps:
      - name: lazygit
        type: brew
        opts:
          tap: jesseduffield/lazygit
      - name: lazygit
        type: shell
        platforms:
          only: ['linux']
        check_has_update: |
          LATEST=$(curl -s "https://api.github.com/repos/jesseduffield/lazygit/releases/latest" | grep -Po '"tag_name": "v\K[^"]*')
          CURRENT=$(lazygit --version | awk -F'[,=]' '{print $6}')
          test "$LATEST" != "$CURRENT"
        opts:
          command: |
            cd $(mktemp -d)
            VERSION=$(curl -s "https://api.github.com/repos/jesseduffield/lazygit/releases/latest" | grep -Po '"tag_name": "v\K[^"]*')
            curl -Lo lazygit.tar.gz "https://github.com/jesseduffield/lazygit/releases/latest/download/lazygit_${VERSION}_Linux_x86_64.tar.gz"
            tar xf lazygit.tar.gz lazygit
            sudo install lazygit /usr/local/bin
            rm -rf lazygit.tar.gz lazygit
  - name: lazygit-config
    type: group
    steps:
      - name: lazygit
        type: rsync
        opts:
          source: $DOTFILES/.config/lazygit.yml
          destination: $LAZYGIT_HOME/config.yml
  - name: lazydocker
    type: group
    steps:
      - name: lazydocker
        type: brew
        opts:
          tap: jesseduffield/lazydocker
      - name: lazydocker
        type: shell
        platforms:
          only: ['linux']
        opts:
          command: |
            cd $(mktemp -d)
            VERSION=$(curl -s "https://api.github.com/repos/jesseduffield/lazydocker/releases/latest" | grep -Po '"tag_name": "v\K[^"]*')
            curl -Lo lazydocker.tar.gz "https://github.com/jesseduffield/lazydocker/releases/latest/download/lazydocker_${VERSION}_Linux_x86_64.tar.gz"
            tar xf lazydocker.tar.gz lazydocker
            sudo install lazydocker /usr/local/bin
            rm -rf lazydocker.tar.gz lazydocker
  - name: delta
    type: group
    steps:
      - name: delta
        type: shell
        platforms:
          only: ['linux']
        opts:
          command: |
            curl https://github.com/dandavison/delta/releases/download/0.17.0/git-delta_0.17.0_amd64.deb | dpkg -i
      - name: git-delta
        type: brew
  - name: fnm
    type: shell
    post_install: |
      fnm install --lts
      fnm use lts-latest
    opts:
      command: curl -fsSL https://fnm.vercel.app/install | bash
  - name: pyenv
    type: group
    steps:
      - name: pyenv
        type: brew
      - name: pyenv
        type: shell
        platforms:
          only: ['linux']
        opts:
          command: 'curl https://pyenv.run | bash'
  - name: pipx
    type: group
    post_install: sudo pipx ensurepath --global
    steps:
      - name: pipx
        type: brew
      - name: pipx
        type: apt
        platforms:
          only: ['linux']
  - name: pandoc
    type: group
    steps:
      - name: pandoc
        type: brew
      - name: pandoc
        type: shell
        platforms:
          only: ['linux']
        opts:
          command: |
            cd $(mktemp -d)
            VERSION=$(curl -s "https://api.github.com/repos/jgm/pandoc/tags" | jq -r ".[] | select(.name | contains('cli')) | .name" | head -n 1)
            curl -Lo pandoc.deb "https://github.com/jgm/pandoc/releases/download/$VERSION/pandoc-${VERSION}-1-amd64.deb"
            dpkg -i pandoc.deb
            rm -rf pandoc.deb
  - name: jq
    type: brew
  - name: yq
    type: shell
    opts:
      command: pipx install yq
  - name: direnv
    type: group
    steps:
      - name: direnv
        type: brew
      - name: direnv
        type: shell
        platforms:
          only: ['linux']
        opts:
          command: export bin_path=/usr/local/bin curl -sfL https://direnv.net/install.sh | bash
  - name: dotenvx
    type: group
    steps:
      - name: dotenvx
        type: brew
        opts:
          tap: dotenvx/brew
      - name: dotenvx
        type: shell
        platforms:
          only: ['linux']
        opts:
          command: curl -sfS https://dotenvx.sh | sh
  - name: ollama
    type: brew
    post_install: brew services start ollama
  - name: openwebui
    type: shell
    check_installed: docker inspect open-webui
    opts:
      command: |
        docker run -d \
          -p 3300:8080 \
          --add-host=host.docker.internal:host-gateway \
          -v open-webui:/app/backend/data \
          --name open-webui \
          --restart always \
          ghcr.io/open-webui/open-webui:main
  - name: gi_gen
    type: group
    steps:
      - name: gi_gen
        type: brew
        opts:
          tap: chenasraf/tap
      - name: gi_gen
        type: shell
        platforms:
          only: ['linux']
        opts:
          command: |
            gi_ver=$(get-gh-latest-tag "chenasraf/gi_gen")
            mkdir -p "$DOTBIN_META"
            arch=$(archmatch -mA "macos-arm" -mI "macos-intel" -l "linux-amd")
            curl -L https://github.com/chenasraf/gi_gen/releases/download/$gi_ver/gi_gen-$gi_ver-$arch -o $DOTBIN/gi_gen
  - name: treelike
    type: group
    steps:
      - name: treelike
        type: brew
        opts:
          tap: chenasraf/tap
      - name: treelike
        type: shell
        platforms:
          only: ['linux']
        opts:
          command: |
            gi_ver=$(get-gh-latest-tag "chenasraf/treelike")
            mkdir -p "$DOTBIN_META"
            arch=$(archmatch -mA "macos-arm" -mI "macos-intel" -l "linux-amd")
            curl -L https://github.com/chenasraf/treelike/releases/download/$treelike_ver/treelike-$arch.tar.gz -o $DOTBIN/treelike.tar.gz
  - name: pnpm
    type: group
    check_installed: exit 1
    steps:
      - name: pnpm
        type: npm
      - name: typescript
        bin_name: tsc
        type: pnpm
        opts:
          command: pnpm i -g typescript
      - name: tldr
        type: pnpm
      - name: simple-scaffold
        type: pnpm
      - name: firebase-tools
        bin_name: firebase
        type: pnpm
      - name: prettier
        type: pnpm
      - name: http-server
        type: pnpm
      - name: licenseg
        type: pnpm
      - name: vscode-langservers-extracted
        bin_name: vscode-json-language-server
        type: pnpm
  - name: home
    type: shell
    opts:
      bin_name: tx
      command: |
        cd $DOTFILES/utils
        pnpm i && pnpm build && pnpm ginst
  - name: tmux-config
    type: shell
    opts:
      command: tmux source-file "$HOME/.config/tmux/conf.tmux" 2>/dev/null
  - name: zplug
    type: shell
    check_installed: test -d ~/.zplug
    check_has_update: exit 0
    opts:
      command: |
        curl -sL --proto-redir -all,https https://raw.githubusercontent.com/zplug/installer/master/installer.zsh | zsh
        zplug install
        zplug load --verbose
      update_command: |
        source $HOME/.dotfiles/zplug.init.zsh
        zplug update
        zplug load --verbose
