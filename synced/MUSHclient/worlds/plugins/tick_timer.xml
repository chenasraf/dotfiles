<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE muclient>

<muclient>
<plugin
   name="aaaaConnected_For"
   author="NeoCool"
   id="7d3d1d9823aa2596e7b0f8f9"
   language="Lua"
   purpose="tells me how long I've been logged in"
   date_written="2023-10-02"
   requires="5.07"
   version="2.0"
   >

</plugin>

<script>

<![CDATA[

require "gmcphelper"

function OnPluginBroadcast (msg, id, name, text)
	if (id == '3e7dedbe37e44942dd46d264') then
		if (text == "comm.tick") then
			res, gmcparg = CallPlugin("3e7dedbe37e44942dd46d264","gmcpval","comm")
			luastmt = "gmcpdata = " .. gmcparg
			assert (loadstring (luastmt or "")) ()
			do_tick_timer ()
		end
	end
end

local started = os.time()

function get_connection_time_from_os()
    local cur = os.time()
    local diff = os.difftime(cur, started)
    return formatDuration(diff)
end

function formatDuration(seconds)
		local days_connected_for = math.floor(seconds / (24 * 3600))
		seconds_connected_for = seconds % (24 * 3600)
		local hours_connected_for = math.floor(seconds / 3600)
		seconds_connected_for = seconds % 3600
		local minutes_connected_for = math.floor(seconds / 60)
		seconds_connected_for = seconds % 60

		local parts = {}
		if days_connected_for > 0 then
			table.insert(parts, days_connected_for .. (days_connected_for == 1 and " day" or " days"))
		end
		if hours_connected_for > 0 then
			table.insert(parts, hours_connected_for .. (hours_connected_for == 1 and " hour" or " hours"))
		end
		if minutes_connected_for > 0 then
			table.insert(parts, minutes_connected_for .. (minutes_connected_for == 1 and " minute" or " minutes"))
		end
		if seconds_connected_for > 0 then
			table.insert(parts, seconds_connected_for .. (seconds_connected_for == 1 and " second" or " seconds"))
		end

		if #parts == 0 then
			return "0 seconds"
			elseif #parts == 1 then
			return parts[1]
		else
			local lastPart = table.remove(parts)
			local formatted = table.concat(parts, ", ") .. " and " .. lastPart
			return formatted
		end				
end

function do_tick_timer (time_taken)
   
  tick_timer_connected_for = get_connection_time_from_os()
			
	Note("tick_timer for Connected_For.xml is now: " .. tick_timer_connected_for)

end

function OnPluginInstall ()
	start_time_auto_afk = os.time()
	SetVariable("tick_timer_connected_for", "0")
	tick_timer_connected_for = GetVariable("tick_timer_connected_for")
	Note("tick timer on plugin install for Connected_For.xml is  : " .. tick_timer_connected_for)
	
	SetVariable("days_connected_for", "0")
	days_connected_for = GetVariable("days_connected_for")
	
	SetVariable("days_no_logout", "0")
	SetVariable("hours_no_logout", "0")
	SetVariable("mins_no_logout", "0")
	
	days_no_logout=GetVariable("days_no_logout")
	hours_no_logout=GetVariable("hours_no_logout")
	mins_no_logout=GetVariable("mins_no_logout")

end

]]>

</script>

</muclient>
